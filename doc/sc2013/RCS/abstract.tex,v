head	1.5;
access;
symbols;
locks; strict;
comment	@% @;


1.5
date	2013.07.29.01.59.21;	author vicente;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.28.23.17.47;	author vicente;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.24.13.18.17;	author bsnam;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.18.05.05.19;	author bsnam;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.12.06.27.59;	author bsnam;	state Exp;
branches;
next	;


desc
@@


1.5
log
@just added one sentence
@
text
@
\begin{abstract}

%In modern query processing systems, the caching facilities are distributed and
%scale in accordance with the number of servers. To maximize the overall system
%throughput, the distributed system should balance the query loads among
%servers \emph{and} also leverage cached results.  In particular, leveraging
%distributed cached data is becoming more important as many systems are being
%built by connecting many small heterogeneous machines rather than relying on a
%few high-performance workstations.  
%
%Although many query scheduling policies exist such as round-robin and
%load-monitoring, they are not sophisticated enough to both balance the load
%and leverage cached results.  
%

In this work, we present a novel distributed file processing framework called
\emph{UniDQP} that takes into account the dynamic nature of file I/O request 
distribution and remote contents of distributed caching infrastructure.  The
job scheduler of the framework makes scheduling decisions based on the 
spacial location of the queries. 
In addiction, we propose an innovate scheme enhancing the cohesion of system.
%I dont know how to describe the above sentence

%two layer back-end
%servers structure achieving a high cohesion with the scheduler.

\end{abstract}
@


1.4
log
@Just added two lines.
@
text
@d21 6
a26 2
spacial location of the queries. In addiction, we propose a two layer back-end
servers structure achieving a high cohesion with the scheduler.
@


1.3
log
@*** empty log message ***
@
text
@d21 2
a22 1
...
@


1.2
log
@*** empty log message ***
@
text
@d4 12
a15 20
In modern query processing systems, the caching facilities are distributed and
scale in accordance with the number of servers. To maximize the overall system
throughput, the distributed system should balance the query loads among servers
\emph{and} also leverage cached results.  
%In particular, leveraging distributed cached data is becoming more important
%as many systems are being built by connecting many small heterogeneous
%machines rather than relying on a few high-performance workstations.  
Although many query scheduling policies exist such as round-robin and
load-monitoring, they are not sophisticated enough to both balance the load and
leverage cached results.  In this work, we implemented a distributed multiple
query optimization framework called \emph{UniDQP} that takes into account the
dynamic contents of distributed caching infrastructure.  The query scheduler of
the framework uses a well-known trend-prediction algorithm \emph{exponential
moving average} (EMA) in a distributed manner so that queries are well balanced
and cached results are utilized the most.  On top of this framework, we
implemented a bio-medical image browsing application as a representative
example for scientific data intensive applications. The experimental results
show that the EMA-based query scheduling policies outperform existing policies
by producing better query plans in terms of both load balancing and cache hit
ratio.
d17 5
@


1.1
log
@Initial revision
@
text
@d4 21
a24 1
TBD - Beomseok
@
