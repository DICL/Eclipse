#!/bin/env ruby

require 'optparse'
require 'ffi'

# This module act as a namespace for the script 
module Ecfs
  CONFPATH       = "@sysconfdir@/eclipse.json" 
  BINDIR         = "@bindir@"

  class Network 
    def initialize
      @nodelist = File.open(CONFPATH) { |f| JSON.parse(f.read) }["nodes"]

      `#{BINDIR}/master &`
      @nodelist.each do |node|
        `ssh #{node} #{BINDIR}/slave &`
      end

      `#{BINDIR}/cacheserver &`
      @nodelist.each do |node|
        `ssh #{node} #{BINDIR}/eclipse &`
      end
    end

    def die
      @nodelist = File.open(CONFPATH) { |f| JSON.parse(f.read) }

      `killall master`
      `killall cacheserver`
      @nodelist.each do |node|
        `ssh #{node} killall slave`
        `ssh #{node} killall eclipse`
      end
    end
  end

  class Ufile
    def initiliaze name:, addr:
      @name = name;
      @addr = addr;
    end
  end

  class Fs
    def initialize
      @files       = {}
      @config = File.open(CONFPATH) { |f| JSON.parse(f.read) }
      @nodelist = @config["nodes"]
      @fs_path  = @config["fs_path"] + ".list"

      module Eclipse
        extend FFI::Library                                                           
        ffi_lib './hash.so'
        attach_function :h, [ :string , :size_t ], :ushort
      end
    end

    def put filename:
      hashvalue = Eclipse.h(filename)
      @files[filename] = ufile.new name: filename, addr: hashvalue
      writetodisk
    end

    def get filename:

    end

    def rm filename:
      hashvalue = Eclipse.h(filename)

      `ssh `

    end

    def cat filename:
      hashvalue = Eclipse.h(filename)
      output = `ssh cat #{filepath}`
      puts output.join
    end

    def list
      @files.each do |f|

      end
    end

    def writetodisk 
      File.open(@fs_path) { |f| f.write(JSON.generate(@files)) }
    end

  end

#  class CLI_driver < Core
#
#  end
#
end
