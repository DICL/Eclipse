#!/bin/env ruby

require 'optparse'
require 'ffi'
require 'ostruct'
require 'awesome_print'
require 'json'

# This module act as a namespace for the script
module Ecfs
  CONFPATH = "@sysconfdirfull@/eclipse.json"
  BINDIR   = "@bindirfull@"
  LIBDIR   = "@libdirfull@"

  class Core #{{{
    def self.launch
      @nodelist = File.open(CONFPATH) { |f| JSON.parse(f.read) }["nodes"]

      `#{BINDIR}/master &>/dev/null &`
      `sleep 1`
      @nodelist.each do |node|
        system "ssh #{node} 'nohup #{BINDIR}/slave </dev/null &>/dev/null & exit'"
      end

      `#{BINDIR}/cacheserver &>/dev/null &`
      `sleep 1`
      @nodelist.each do |node|
        system "ssh #{node} 'nohup #{BINDIR}/eclipse </dev/null &>/dev/null & exit'"
      end
    end

    # :TODO: big refactor
    def self.show
      @nodelist = File.open(CONFPATH) { |f| JSON.parse(f.read) }["nodes"]
      `pgrep -u #{`whoami`.chomp} master`
      status = $?.exitstatus == 0 ? "Running" : "Stopped"

      `pgrep -u #{`whoami`.chomp} cacheserver`
      status2 = $?.exitstatus == 0 ? "Running" : "Stopped"
      puts "#{"Localhost".green} [Master: #{status.red}] [Cacheserver: #{status2.red}]"
      @nodelist.each do |node|                                    # Kill for each of the nodes
        `ssh #{node} pgrep -u #{`whoami`.chomp} slave`
        status = $?.exitstatus == 0 ? "Running" : "Stopped"

        `ssh #{node} pgrep -u #{`whoami`.chomp} eclipse`
        status2 = $?.exitstatus == 0 ? "Running" : "Stopped"
        puts "#{`ssh #{node} hostname`.chomp.green} [Slave: #{status.red}] [Eclipse: #{status2.red}]"
      end
    end

    def self.die
      @nodelist = File.open(CONFPATH) { |f| JSON.parse(f.read) }["nodes"]

      `pkill -u #{`whoami`.chomp} master`
      `pkill -u #{`whoami`.chomp} cacheserver`
      @nodelist.each do |node|
        `ssh #{node} pkill -u #{`whoami`.chomp} slave`
        `ssh #{node} pkill -u #{`whoami`.chomp} eclipse`
      end
    end
  end #}}}

  class Fs
    module Eclipse
      extend FFI::Library
      ffi_lib "#{LIBDIR}/libehash.so"
      attach_function :h, [ :string , :size_t ], :ushort
    end

    def initialize
      @verbose         = false
      @files           = {}
      @config          = File.open(CONFPATH) { |f| JSON.parse(f.read) }
      @nodelist        = @config["nodes"]
      @fs_path         = @config["fs_path"]
      @fs_scratch_path = @config["fs_scratch_path"]
      @fs_tmpfile      = @config["fs_path"] + "/.list"
      @files           = File.open(@fs_tmpfile) { |f| JSON.parse(f.read) } if File.exist? @fs_tmpfile
    end

    def hash(input);         Eclipse.h(input, input.length) end
    def node_containing(fn); @nodelist[hash(fn) % @nodelist.length] end

    def put(input)
      input.each do |fn|
        node = node_containing(fn)
        @files[fn] = node

        File.open(@fs_tmpfile, 'w') { |f| f.write(JSON.generate(@files)) }
        cmd = "scp #{@fs_path}/#{fn} #{node}:#{@fs_scratch_path}/#{fn}"
        puts cmd if @verbose
        system cmd
      end
    end

    def get filename:
      raise "\'#{filename}\' not found in Eclipse FS" unless @files[filename]

      node = node_containing(filename)
      system "ssh #{node} cat #{@fs_scratch_path}/#{filename}"
    end

    def rm(input)
      input.each do |fn|
        raise "\'#{fn}\' not found in Eclipse FS" unless @files[fn]

        node = node_containing(fn)
        pathtofile = @fs_scratch_path + "/" + fn
        cmd = "ssh #{node} rm -f #{pathtofile}"
        puts cmd if @verbose
        system cmd
        @files.delete(fn)
        File.open(@fs_tmpfile, 'w') { |f| f.write(JSON.generate(@files)) }
      end
    end

    def list
      ap @files
    end
  end

  class CLI_driver < Fs
    def initialize input: #{{{
      @options = {}
      super()
      OptionParser.new do |opts|
        opts.banner = <<EOF
ecfs (Eclipse FileSystem) is an script to manage the fs
Usage: ecfs [options] <actions> [FILE]...
EOF
        opts.version = 1.0
        opts.program_name = "Eclipse Launcher"
        opts.separator "Core actions"
        opts.separator "   launch       Create new Eclipse network"
        opts.separator "   die          Close the network"
        opts.separator "   show         Check the status of the network"
        opts.separator ""
        opts.separator "Filesystem actions"
        opts.separator "   put FILE...  insert FILE..."
        opts.separator "   get FILE...  \'cat\' the FILE..."
        opts.separator "   rm FILE...   remove FILE..."
        opts.separator "   ls           list all the files in the FS"
        opts.separator ""
        opts.separator "Options"
        opts.on_tail("-h", "--help"   , "recursive this")         { puts opts }
        opts.on_tail("-v", "--verbose" , "printout verbose info") { @verbose = true }
      end.parse! input

      case ARGV.shift
      when "launch"; Core.launch
      when "die";    Core.die
      when "show";   Core.show
      when "put";    put(ARGV)
      when "get";    get(filename: ARGV[0])
      when "rm";     rm(ARGV)
      when "ls";     list
      end
    end #}}}
  end
end

Ecfs::CLI_driver.new input: ARGV
