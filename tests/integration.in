#!/bin/env ruby

require 'json'              #
require 'test/unit'         #

CONFPATH = "@sysconfdirfull@/eclipse.json"
BINDIR   = "@bindirfull@"

class Core < Test::Unit::TestCase #{{{
  def initialize
    @nodelist = File.open(find_confpath) { |f| JSON.parse(f.read) }["nodes"]
    @verbose  = false
  end

  def find_confpath
    home = "#{ENV['HOME']}/.eclipse.json"
    if File.exist? home
      return home
    else
      return CONFPATH
    end
  end

  def launch #{{{
    `#{BINDIR}/master &>/dev/null &`
    assert_equal(0, $?.exitstatus)
    `sleep 1`
    @nodelist.each do |node|
      assert(system "ssh #{node} 'nohup #{BINDIR}/slave </dev/null &>/dev/null & exit'")
    end

    `#{BINDIR}/cacheserver &>/dev/null &`
    assert_equal(0, $?.exitstatus)
    `sleep 1`
    @nodelist.each do |node|
      assert(system "ssh #{node} 'nohup #{BINDIR}/eclipse </dev/null &>/dev/null & exit'")
    end
  end #}}}

  def show #{{{
    `pgrep -u #{`whoami`.chomp} master`
    assert($?.exitstatus == 0)

    `pgrep -u #{`whoami`.chomp} cacheserver`
    assert($?.exitstatus == 0)

    @nodelist.each do |node|                                    # Kill for each of the nodes
      `ssh #{node} pgrep -u #{`whoami`.chomp} slave`
      assert($?.exitstatus == 0)

      `ssh #{node} pgrep -u #{`whoami`.chomp} eclipse`
      assert($?.exitstatus == 0)
    end
  end #}}}

  def close #{{{
    `pkill -u #{`whoami`.chomp} master`
    `pkill -u #{`whoami`.chomp} cacheserver`
    @nodelist.each do |node|
      `ssh #{node} pkill -u #{`whoami`.chomp} slave`
      `ssh #{node} pkill -u #{`whoami`.chomp} eclipse`
    end #}}}
  end
end #}}}

a = Core.new
a.launch
a.show
a.close
