!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ALPHA	src_sr/common/macros.h	42;"	d
AR	Makefile	/^AR = ar$/;"	m
Arguments	src_sr/slave/node.hh	/^struct Arguments {$/;"	s
Arguments::data_file	src_sr/slave/node.hh	/^  char data_file [256];$/;"	m	struct:Arguments	access:public
Arguments::host_str	src_sr/slave/node.hh	/^  char host_str [32];$/;"	m	struct:Arguments	access:public
Arguments::peer_left	src_sr/slave/node.hh	/^  char peer_left [32];$/;"	m	struct:Arguments	access:public
Arguments::peer_right	src_sr/slave/node.hh	/^  char peer_right [32];$/;"	m	struct:Arguments	access:public
Arguments::port	src_sr/slave/node.hh	/^  int port;$/;"	m	struct:Arguments	access:public
AveExecTime	src_sr/master/scheduler.cc	/^uint64_t AveExecTime = 0, AveWaitTime = 0; $/;"	v
AveWaitTime	src_sr/master/scheduler.cc	/^uint64_t AveExecTime = 0, AveWaitTime = 0; $/;"	v
BINLIB	Makefile	/^BINLIB  = -lstdc++ -lsimring$/;"	m
BOUNDARY	src_sr/common/SETcache.hh	/^ BOUNDARY = 0x4,$/;"	e	enum:policy
CACHESIZE	src_sr/slave/node.cc	28;"	d	file:
CXX	Makefile	/^CXX = gcc$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -g -std=gnu++98 -rdynamic$/;"	m
DATAFILE	src_sr/common/macros.h	26;"	d
DHT	src_sr/common/dht.cc	/^DHT::DHT () {}$/;"	f	class:DHT	signature:()
DHT	src_sr/common/dht.cc	/^DHT::DHT (int port, int n, const char* ifa, const char ** in) { $/;"	f	class:DHT	signature:(int port, int n, const char* ifa, const char ** in)
DHT	src_sr/common/dht.hh	/^  DHT ();$/;"	p	class:DHT	access:public	signature:()
DHT	src_sr/common/dht.hh	/^  DHT (int, int, const char*, const char**);$/;"	p	class:DHT	access:public	signature:(int, int, const char*, const char**)
DHT	src_sr/common/dht.hh	/^class DHT {$/;"	c
DHT::DHT	src_sr/common/dht.cc	/^DHT::DHT () {}$/;"	f	class:DHT	signature:()
DHT::DHT	src_sr/common/dht.cc	/^DHT::DHT (int port, int n, const char* ifa, const char ** in) { $/;"	f	class:DHT	signature:(int port, int n, const char* ifa, const char ** in)
DHT::DHT	src_sr/common/dht.hh	/^  DHT ();$/;"	p	class:DHT	access:public	signature:()
DHT::DHT	src_sr/common/dht.hh	/^  DHT (int, int, const char*, const char**);$/;"	p	class:DHT	access:public	signature:(int, int, const char*, const char**)
DHT::_nservers	src_sr/common/dht.hh	/^  int _nservers;$/;"	m	class:DHT	access:protected
DHT::check	src_sr/common/dht.cc	/^bool DHT::check (Header& h) {$/;"	f	class:DHT	signature:(Header& h)
DHT::check	src_sr/common/dht.hh	/^  bool check (Header&);$/;"	p	class:DHT	access:public	signature:(Header&)
DHT::local_ip	src_sr/common/dht.hh	/^  char local_ip [32];$/;"	m	class:DHT	access:protected
DHT::local_no	src_sr/common/dht.hh	/^  int local_no;$/;"	m	class:DHT	access:protected
DHT::network_addr	src_sr/common/dht.hh	/^  struct sockaddr_in *network_addr;$/;"	m	class:DHT	typeref:struct:DHT::sockaddr_in	access:protected
DHT::network_ip	src_sr/common/dht.hh	/^  char ** network_ip;$/;"	m	class:DHT	access:protected
DHT::port	src_sr/common/dht.hh	/^  int sock, port;$/;"	m	class:DHT	access:protected
DHT::request	src_sr/common/dht.cc	/^bool DHT::request (Header& h) {$/;"	f	class:DHT	signature:(Header& h)
DHT::request	src_sr/common/dht.hh	/^  bool request (Header&);$/;"	p	class:DHT	access:public	signature:(Header&)
DHT::set_network	src_sr/common/dht.cc	/^void DHT::set_network (int port, int n, const char* ifa, const char ** in) {$/;"	f	class:DHT	signature:(int port, int n, const char* ifa, const char ** in)
DHT::set_network	src_sr/common/dht.hh	/^  void set_network (int, int, const char*, const char**);$/;"	p	class:DHT	access:public	signature:(int, int, const char*, const char**)
DHT::sock	src_sr/common/dht.hh	/^  int sock, port;$/;"	m	class:DHT	access:protected
DHT::~DHT	src_sr/common/dht.cc	/^DHT::~DHT () {$/;"	f	class:DHT	signature:()
DHT::~DHT	src_sr/common/dht.hh	/^  ~DHT ();$/;"	p	class:DHT	access:public	signature:()
DHT_PORT	src_sr/slave/node.cc	33;"	d	file:
DISK_PAGE_SIZE	common/order.hh	/^  size_t DISK_PAGE_SIZE;$/;"	m	class:Order	access:private
DPSIZE	src_sr/common/macros.h	22;"	d
EMA	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
EMA	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
EXIT_IF	src_sr/common/macros.h	49;"	d
FAIL	src_sr/common/macros.h	19;"	d
HOST	src_sr/common/macros.h	38;"	d
Header	src_sr/common/packets.hh	/^  Header () { trace = false; }$/;"	f	class:Header	access:public	signature:()
Header	src_sr/common/packets.hh	/^class Header {$/;"	c
Header::EMA	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
Header::Header	src_sr/common/packets.hh	/^  Header () { trace = false; }$/;"	f	class:Header	access:public	signature:()
Header::get_EMA	src_sr/common/packets.hh	/^  double   get_EMA   () { return EMA; }$/;"	f	class:Header	access:public	signature:()
Header::get_low	src_sr/common/packets.hh	/^  double   get_low   () { return low_b; }$/;"	f	class:Header	access:public	signature:()
Header::get_point	src_sr/common/packets.hh	/^  uint64_t get_point () { return point; }$/;"	f	class:Header	access:public	signature:()
Header::get_upp	src_sr/common/packets.hh	/^  double   get_upp   () { return upp_b; }$/;"	f	class:Header	access:public	signature:()
Header::low_b	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
Header::operator =	src_sr/common/packets.hh	/^  Header& operator= (const Header& that) {$/;"	f	class:Header	access:public	signature:(const Header& that)
Header::operator ==	src_sr/common/packets.hh	/^  bool operator== (const Header& that) {$/;"	f	class:Header	access:public	signature:(const Header& that)
Header::point	src_sr/common/packets.hh	/^  uint64_t point;  \/\/! Key\/ index$/;"	m	class:Header	access:public
Header::set_EMA	src_sr/common/packets.hh	/^  Header& set_EMA (double e)     { EMA = e;      return *this; }$/;"	f	class:Header	access:public	signature:(double e)
Header::set_low	src_sr/common/packets.hh	/^  Header& set_low (double l)     { low_b = l;    return *this; }$/;"	f	class:Header	access:public	signature:(double l)
Header::set_point	src_sr/common/packets.hh	/^  Header& set_point (uint64_t p) { point = p;    return *this; }$/;"	f	class:Header	access:public	signature:(uint64_t p)
Header::set_trazable	src_sr/common/packets.hh	/^  Header& set_trazable ()        { trace = true; return *this; }$/;"	f	class:Header	access:public	signature:()
Header::set_upp	src_sr/common/packets.hh	/^  Header& set_upp (double u)     { upp_b = u;    return *this; }$/;"	f	class:Header	access:public	signature:(double u)
Header::trace	src_sr/common/packets.hh	/^  bool trace;$/;"	m	class:Header	access:public
Header::upp_b	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
INCLUDE	Makefile	/^INCLUDE = -I.\/lib\/ -I.\/src\/common\/ -L.\/lib\/ $/;"	m
INCLUDE	src_sr/master/Makefile	/^INCLUDE := -I.\/..\/..\/lib\/ -I.\/$/;"	m
INCLUDE	src_sr/slave/test/Makefile	/^INCLUDE := -I.\/..\/..\/..\/lib\/$/;"	m
JOIN	src_sr/common/SETcache.hh	/^ JOIN     = 0x8$/;"	e	enum:policy
LIB	src_sr/master/Makefile	/^LIB     := -l simring$/;"	m
LIB	src_sr/slave/test/Makefile	/^LIB     := -l simring -l pthread$/;"	m
LIBDIR	src_sr/slave/test/Makefile	/^LIBDIR  := -L.\/..\/..\/..\/lib\/$/;"	m
LOT	src_sr/common/macros.h	46;"	d
LRU	src_sr/common/SETcache.hh	/^ LRU      = 0x2,$/;"	e	enum:policy
MAKE	Makefile	/^MAKE = make$/;"	m
MAX_HILBERT_VALUE	src_sr/master/em_kde.cc	/^const int MAX_HILBERT_VALUE = 10;$/;"	v
M_DEBUG	src_sr/common/utils.hh	/^ M_DEBUG = 2,$/;"	e	enum:m_error
M_ERR	src_sr/common/utils.hh	/^ M_ERR   = 0,$/;"	e	enum:m_error
M_INFO	src_sr/common/utils.hh	/^ M_INFO  = 3$/;"	e	enum:m_error
M_WARN	src_sr/common/utils.hh	/^ M_WARN  = 1,$/;"	e	enum:m_error
Master	src_sr/master/master.hh	/^  Master () { } $/;"	f	class:Master	access:public	signature:()
Master	src_sr/master/master.hh	/^class Master {$/;"	c
Master::Master	src_sr/master/master.hh	/^  Master () { } $/;"	f	class:Master	access:public	signature:()
Master::backend	src_sr/master/master.hh	/^  Node** backend;$/;"	m	class:Master	access:protected
Master::nslaves	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
Master::port	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
Master::recv	src_sr/master/master.hh	/^  Order& recv (char* file_name);$/;"	p	class:Master	access:public	signature:(char* file_name)
Master::select_slave	src_sr/master/master.cc	/^int Master::select_slave (uint64_t key) {$/;"	f	class:Master	signature:(uint64_t key)
Master::select_slave	src_sr/master/master.hh	/^  virtual select_slave (uint64_t key); $/;"	p	class:Master	access:protected	signature:(uint64_t key)
Master::set_nslaves	src_sr/master/master.hh	/^  Master& set_nslaves (int);$/;"	p	class:Master	access:public	signature:(int)
Master::set_port	src_sr/master/master.hh	/^  Master& set_port (int);$/;"	p	class:Master	access:public	signature:(int)
Master::set_signals	src_sr/master/master.hh	/^  Master& set_signals ();$/;"	p	class:Master	access:public	signature:()
Master::setup_network	src_sr/master/master.cc	/^bool Master::setup_network () {$/;"	f	class:Master	signature:()
Master::setup_network	src_sr/master/master.hh	/^  bool setup_network ();$/;"	p	class:Master	access:protected	signature:()
Master::sock	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
Master::upload	src_sr/master/master.hh	/^  int upload (Order&);$/;"	p	class:Master	access:public	signature:(Order&)
MaxExecTime	src_sr/master/scheduler.cc	/^uint64_t MaxExecTime = 0, MaxWaitTime = 0; $/;"	v
MaxWaitTime	src_sr/master/scheduler.cc	/^uint64_t MaxExecTime = 0, MaxWaitTime = 0; $/;"	v
NOTHING	src_sr/common/SETcache.hh	/^ NOTHING  = 0x0,$/;"	e	enum:policy
NSERVERS	src_sr/common/macros.h	34;"	d
Node	src_sr/master/node_client.hh	/^		Node () : EMA (.0), low_b (.0), upp_b (.0), alpha (.0) {} $/;"	f	class:Node	access:public	signature:()
Node	src_sr/master/node_client.hh	/^		Node (double a) : EMA (.0), low_b (.0), upp_b (.0), alpha (a) {} $/;"	f	class:Node	access:public	signature:(double a)
Node	src_sr/master/node_client.hh	/^		Node (double a, double e) : EMA (e), low_b (.0), upp_b (.0) , alpha (a) {} $/;"	f	class:Node	access:public	signature:(double a, double e)
Node	src_sr/master/node_client.hh	/^class Node { $/;"	c
Node	src_sr/slave/node_sketch.cc	/^Node::Node (int argc, const char ** argv, const char * ifa, const char ** net) {$/;"	f	class:Node	signature:(int argc, const char ** argv, const char * ifa, const char ** net)
Node	src_sr/slave/node_sketch.hh	/^  Node (int, const char**, const char*, const char**);$/;"	p	class:Node	access:public	signature:(int, const char**, const char*, const char**)
Node	src_sr/slave/node_sketch.hh	/^class Node {$/;"	c
Node::EMA	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
Node::Node	src_sr/master/node_client.hh	/^		Node () : EMA (.0), low_b (.0), upp_b (.0), alpha (.0) {} $/;"	f	class:Node	access:public	signature:()
Node::Node	src_sr/master/node_client.hh	/^		Node (double a) : EMA (.0), low_b (.0), upp_b (.0), alpha (a) {} $/;"	f	class:Node	access:public	signature:(double a)
Node::Node	src_sr/master/node_client.hh	/^		Node (double a, double e) : EMA (e), low_b (.0), upp_b (.0) , alpha (a) {} $/;"	f	class:Node	access:public	signature:(double a, double e)
Node::Node	src_sr/slave/node_sketch.cc	/^Node::Node (int argc, const char ** argv, const char * ifa, const char ** net) {$/;"	f	class:Node	signature:(int argc, const char ** argv, const char * ifa, const char ** net)
Node::Node	src_sr/slave/node_sketch.hh	/^  Node (int, const char**, const char*, const char**);$/;"	p	class:Node	access:public	signature:(int, const char**, const char*, const char**)
Node::TotalExecTime	src_sr/slave/node_sketch.hh	/^  uint64_t TotalExecTime;$/;"	m	class:Node	access:protected
Node::TotalWaitTime	src_sr/slave/node_sketch.hh	/^  uint64_t TotalWaitTime;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_dht       (void*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_forward   (void*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_neighbor  (void*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_scheduler (void*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  void close_all              (void) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  void parse_args             (int, const char**, Arguments*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  void setup_client_peer      (const int, const char*, int*, struct sockaddr_in*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  void setup_client_scheduler (int, const char*, int*) WEAK;$/;"	m	class:Node	access:protected
Node::WEAK	src_sr/slave/node_sketch.hh	/^  void setup_server_peer      (int, int*, struct sockaddr_in*) WEAK;$/;"	m	class:Node	access:protected
Node::accept	src_sr/master/node_client.hh	/^		Node& accept (int sock) {$/;"	f	class:Node	access:public	signature:(int sock)
Node::addr	src_sr/master/node_client.hh	/^		struct sockaddr_in addr;$/;"	m	class:Node	typeref:struct:Node::sockaddr_in	access:protected
Node::addr_left	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::sockaddr_in	access:protected
Node::addr_right	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::	access:protected
Node::addr_server	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::	access:protected
Node::alpha	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
Node::cache	src_sr/slave/node_sketch.hh	/^  SETcache cache; $/;"	m	class:Node	access:protected
Node::catch_signal	src_sr/slave/node_sketch.cc	/^void Node::catch_signal (int arg) {$/;"	f	class:Node	signature:(int arg)
Node::catch_signal	src_sr/slave/node_sketch.hh	/^  void catch_signal           (int);$/;"	p	class:Node	access:protected	signature:(int)
Node::close	src_sr/master/node_client.hh	/^		Node& close () { ::close (fd); return *this; }$/;"	f	class:Node	access:public	signature:()
Node::close_all	src_sr/slave/node_sketch.cc	/^void Node::close_all () {$/;"	f	class:Node	signature:()
Node::data_file	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
Node::dht	src_sr/slave/node_sketch.hh	/^  DHT dht;$/;"	m	class:Node	access:protected
Node::dht_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
Node::fd	src_sr/master/node_client.hh	/^		int fd;$/;"	m	class:Node	access:protected
Node::get_EMA	src_sr/master/node_client.hh	/^		double get_EMA () const { return EMA; }$/;"	f	class:Node	access:public	signature:() const
Node::get_distance	src_sr/master/node_client.hh	/^		double get_distance (Packet& p) { return fabs (EMA - p.get_point ()); }$/;"	f	class:Node	access:public	signature:(Packet& p)
Node::get_distance	src_sr/master/node_client.hh	/^		double get_distance (uint64_t p) { return fabs (EMA - p); }$/;"	f	class:Node	access:public	signature:(uint64_t p)
Node::get_fd	src_sr/master/node_client.hh	/^		int get_fd () { return fd; }$/;"	f	class:Node	access:public	signature:()
Node::get_low	src_sr/master/node_client.hh	/^		double get_low () { return low_b; }$/;"	f	class:Node	access:public	signature:()
Node::get_upp	src_sr/master/node_client.hh	/^		double get_upp () { return upp_b; } $/;"	f	class:Node	access:public	signature:()
Node::hitCount	src_sr/slave/node_sketch.hh	/^  uint64_t hitCount;$/;"	m	class:Node	access:protected
Node::host_str	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
Node::instance	src_sr/slave/node_sketch.hh	/^  static Node& instance;$/;"	m	class:Node	access:public
Node::join	src_sr/slave/node_sketch.cc	/^void Node::join () {$/;"	f	class:Node	signature:()
Node::join	src_sr/slave/node_sketch.hh	/^  bool join ();$/;"	p	class:Node	access:public	signature:()
Node::local_ip	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
Node::low_b	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
Node::missCount	src_sr/slave/node_sketch.hh	/^  uint64_t missCount;$/;"	m	class:Node	access:protected
Node::network_ip	src_sr/slave/node_sketch.hh	/^  const char * network_ip [10] = $/;"	m	class:Node	access:protected
Node::panic	src_sr/slave/node_sketch.hh	/^  bool panic;$/;"	m	class:Node	access:protected
Node::parse_args	src_sr/slave/node_sketch.cc	/^void Node::parse_args (int argc, const char** argv) {$/;"	f	class:Node	signature:(int argc, const char** argv)
Node::peer_left	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
Node::peer_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
Node::peer_right	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
Node::queryProcessed	src_sr/slave/node_sketch.hh	/^  uint32_t queryProcessed;$/;"	m	class:Node	access:protected
Node::queryRecieves	src_sr/slave/node_sketch.hh	/^  uint32_t queryRecieves;$/;"	m	class:Node	access:protected
Node::run	src_sr/slave/node_sketch.cc	/^void Node::run () {$/;"	f	class:Node	signature:()
Node::run	src_sr/slave/node_sketch.hh	/^  bool run ();$/;"	p	class:Node	access:public	signature:()
Node::sch_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
Node::send	src_sr/master/node_client.hh	/^		Node& send (uint64_t point, bool trace = false) {$/;"	f	class:Node	access:public	signature:(uint64_t point, bool trace = false)
Node::send_msg	src_sr/master/node_client.hh	/^		Node& send_msg (const char * in) { ::send_msg (fd, in); return *this; }$/;"	f	class:Node	access:public	signature:(const char * in)
Node::set_EMA	src_sr/master/node_client.hh	/^		Node& set_EMA (double a)    { EMA= a;    return *this;}$/;"	f	class:Node	access:public	signature:(double a)
Node::set_alpha	src_sr/master/node_client.hh	/^		Node& set_alpha (double a)  { alpha = a; return *this;}$/;"	f	class:Node	access:public	signature:(double a)
Node::set_fd	src_sr/master/node_client.hh	/^		Node& set_fd (int f)        { fd = f;    return *this;}$/;"	f	class:Node	access:public	signature:(int f)
Node::set_low	src_sr/master/node_client.hh	/^		Node& set_low (double l)    { low_b = l; return *this;}$/;"	f	class:Node	access:public	signature:(double l)
Node::set_time	src_sr/master/node_client.hh	/^		Node& set_time (uint64_t u) { time = u;  return *this;} $/;"	f	class:Node	access:public	signature:(uint64_t u)
Node::set_upp	src_sr/master/node_client.hh	/^		Node& set_upp (double u)    { upp_b = u; return *this;} $/;"	f	class:Node	access:public	signature:(double u)
Node::setup_client_peer	src_sr/slave/node_sketch.cc	/^Node::setup_client_peer (const int port, const char* host, int* sock, sockaddr_in* addr)$/;"	f	class:Node	signature:(const int port, const char* host, int* sock, sockaddr_in* addr)
Node::setup_client_scheduler	src_sr/slave/node_sketch.cc	/^void Node::setup_client_scheduler (int port, const char* host, int* sock) {$/;"	f	class:Node	signature:(int port, const char* host, int* sock)
Node::setup_server_peer	src_sr/slave/node_sketch.cc	/^void Node::setup_server_peer (int port, int* sock, sockaddr_in* addr) {$/;"	f	class:Node	signature:(int port, int* sock, sockaddr_in* addr)
Node::signal_handler	src_sr/slave/node_sketch.cc	/^void Node::signal_handler () { Node.catch_signal(); }$/;"	f	class:Node	signature:()
Node::signal_handler	src_sr/slave/node_sketch.hh	/^  static void signal_handler ();$/;"	p	class:Node	access:public	signature:()
Node::sock_left	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
Node::sock_right	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
Node::sock_scheduler	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
Node::sock_server	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
Node::thread_dht	src_sr/slave/node_sketch.hh	/^  pthread_t thread_dht;$/;"	m	class:Node	access:protected
Node::thread_forward	src_sr/slave/node_sketch.hh	/^  pthread_t thread_forward;$/;"	m	class:Node	access:protected
Node::thread_func_dht	src_sr/slave/node_sketch.cc	/^void* Node::thread_func_dht (void* arg) {$/;"	f	class:Node	signature:(void* arg)
Node::thread_func_forward	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_forward (void * argv) {$/;"	f	class:Node	signature:(void * argv)
Node::thread_func_neighbor	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_neighbor (void* argv) {$/;"	f	class:Node	signature:(void* argv)
Node::thread_func_scheduler	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_scheduler (void * argv) {$/;"	f	class:Node	signature:(void * argv)
Node::thread_neighbor	src_sr/slave/node_sketch.hh	/^  pthread_t thread_neighbor;$/;"	m	class:Node	access:protected
Node::thread_scheduler	src_sr/slave/node_sketch.hh	/^  pthread_t thread_scheduler;$/;"	m	class:Node	access:protected
Node::time	src_sr/master/node_client.hh	/^		uint64_t time;$/;"	m	class:Node	access:protected
Node::update_EMA	src_sr/master/node_client.hh	/^		Node& update_EMA (double point)  { EMA += alpha * (point - EMA); return *this; } $/;"	f	class:Node	access:public	signature:(double point)
Node::upp_b	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
Node::~Node	src_sr/slave/node_sketch.cc	/^Node::~Node () { close_all (); }$/;"	f	class:Node	signature:()
Node::~Node	src_sr/slave/node_sketch.hh	/^  ~Node ();$/;"	p	class:Node	access:public	signature:()
OBJECT	src_sr/slave/test/Makefile	/^OBJECT  := common.cc$/;"	m
OK	src_sr/common/macros.h	18;"	d
OPTIONS	Makefile	/^OPTIONS = -D__STDC_FORMAT_MACROS$/;"	m
Order	common/order.cc	/^Order::Order (char* chunk) {$/;"	f	class:Order	signature:(char* chunk)
Order	common/order.cc	/^Order::Order (char* file_name, char* data, size_t size) {$/;"	f	class:Order	signature:(char* file_name, char* data, size_t size)
Order	common/order.hh	/^  Order (char*);$/;"	p	class:Order	access:public	signature:(char*)
Order	common/order.hh	/^  Order (char*, void*, size_t);$/;"	p	class:Order	access:public	signature:(char*, void*, size_t)
Order	common/order.hh	/^class Order {$/;"	c
Order::DISK_PAGE_SIZE	common/order.hh	/^  size_t DISK_PAGE_SIZE;$/;"	m	class:Order	access:private
Order::Order	common/order.cc	/^Order::Order (char* chunk) {$/;"	f	class:Order	signature:(char* chunk)
Order::Order	common/order.cc	/^Order::Order (char* file_name, char* data, size_t size) {$/;"	f	class:Order	signature:(char* file_name, char* data, size_t size)
Order::Order	common/order.hh	/^  Order (char*);$/;"	p	class:Order	access:public	signature:(char*)
Order::Order	common/order.hh	/^  Order (char*, void*, size_t);$/;"	p	class:Order	access:public	signature:(char*, void*, size_t)
Order::deserialize	common/order.cc	/^void Order::deserialize (char * chunk) {$/;"	f	class:Order	signature:(char * chunk)
Order::deserialize	common/order.hh	/^  void deserialize (char*);$/;"	p	class:Order	access:public	signature:(char*)
Order::file_name	common/order.hh	/^  char file_name [128];$/;"	m	class:Order	access:private
Order::list_chunk	common/order.hh	/^  list<uint8_t*> list_chunk; \/\/! Splited in 4KiB chuncks$/;"	m	class:Order	access:private
Order::operator <<	common/order.hh	/^  friend ostream& operator<< (ostream& os, Order o) {$/;"	f	class:Order	access:friend	signature:(ostream& os, Order o)
Order::serialize	common/order.cc	/^uint8_t* Order::serialize (size_t* size = NULL) {$/;"	f	class:Order	signature:(size_t* size = NULL)
Order::serialize	common/order.hh	/^  uint8_t* serialize (size_t*);$/;"	p	class:Order	access:public	signature:(size_t*)
Order::~Order	common/order.cc	/^Order::~Order () { } $/;"	f	class:Order	signature:()
PEER_PORT	src_sr/slave/node.cc	32;"	d	file:
POLICY	Makefile	/^POLICY = -DDATA_MIGRATION$/;"	m
PORT	src_sr/common/macros.h	30;"	d
Packet	src_sr/common/packets.hh	/^  Packet () : Header () {} $/;"	f	class:Packet	access:public	signature:()
Packet	src_sr/common/packets.hh	/^  Packet (const Packet& that) : Header (that), time (that.time) {}$/;"	f	class:Packet	access:public	signature:(const Packet& that)
Packet	src_sr/common/packets.hh	/^  Packet (uint64_t p) : Header () { point = p; }	$/;"	f	class:Packet	access:public	signature:(uint64_t p)
Packet	src_sr/common/packets.hh	/^class Packet: public Header {$/;"	c	inherits:Header
Packet::Packet	src_sr/common/packets.hh	/^  Packet () : Header () {} $/;"	f	class:Packet	access:public	signature:()
Packet::Packet	src_sr/common/packets.hh	/^  Packet (const Packet& that) : Header (that), time (that.time) {}$/;"	f	class:Packet	access:public	signature:(const Packet& that)
Packet::Packet	src_sr/common/packets.hh	/^  Packet (uint64_t p) : Header () { point = p; }	$/;"	f	class:Packet	access:public	signature:(uint64_t p)
Packet::operator =	src_sr/common/packets.hh	/^  Packet& operator= (const Packet& that) {$/;"	f	class:Packet	access:public	signature:(const Packet& that)
Packet::set_time	src_sr/common/packets.hh	/^  Packet& set_time (uint64_t t) { time = t; return *this; }$/;"	f	class:Packet	access:public	signature:(uint64_t t)
Packet::time	src_sr/common/packets.hh	/^  uint64_t time; $/;"	m	class:Packet	access:public
Query	src_sr/common/packets.hh	/^  Query (): Packet() {}$/;"	f	class:Query	access:public	signature:()
Query	src_sr/common/packets.hh	/^  Query (const Packet&);$/;"	p	class:Query	access:public	signature:(const Packet&)
Query	src_sr/common/packets.hh	/^  Query (const Query&);$/;"	p	class:Query	access:public	signature:(const Query&)
Query	src_sr/common/packets.hh	/^class Query: public Packet {$/;"	c	inherits:Packet
Query	src_sr/common/query.cc	/^Query::Query (const Packet& p): Packet(p) { }$/;"	f	class:Query	signature:(const Packet& p)
Query	src_sr/common/query.cc	/^Query::Query (const Query& that): Packet(that) {$/;"	f	class:Query	signature:(const Query& that)
Query::Query	src_sr/common/packets.hh	/^  Query (): Packet() {}$/;"	f	class:Query	access:public	signature:()
Query::Query	src_sr/common/packets.hh	/^  Query (const Packet&);$/;"	p	class:Query	access:public	signature:(const Packet&)
Query::Query	src_sr/common/packets.hh	/^  Query (const Query&);$/;"	p	class:Query	access:public	signature:(const Query&)
Query::Query	src_sr/common/query.cc	/^Query::Query (const Packet& p): Packet(p) { }$/;"	f	class:Query	signature:(const Packet& p)
Query::Query	src_sr/common/query.cc	/^Query::Query (const Query& that): Packet(that) {$/;"	f	class:Query	signature:(const Query& that)
Query::finishedDate	src_sr/common/packets.hh	/^  struct timeval finishedDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
Query::getExecTime	src_sr/common/packets.hh	/^  uint64_t getExecTime ();$/;"	p	class:Query	access:public	signature:()
Query::getExecTime	src_sr/common/query.cc	/^uint64_t Query::getExecTime() {$/;"	f	class:Query	signature:()
Query::getWaitTime	src_sr/common/packets.hh	/^  uint64_t getWaitTime ();$/;"	p	class:Query	access:public	signature:()
Query::getWaitTime	src_sr/common/query.cc	/^uint64_t Query::getWaitTime() {$/;"	f	class:Query	signature:()
Query::scheduledDate	src_sr/common/packets.hh	/^  struct timeval scheduledDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
Query::setFinishedDate	src_sr/common/packets.hh	/^  void setFinishedDate ();$/;"	p	class:Query	access:public	signature:()
Query::setFinishedDate	src_sr/common/query.cc	/^void Query::setFinishedDate() {$/;"	f	class:Query	signature:()
Query::setScheduledDate	src_sr/common/packets.hh	/^  void setScheduledDate ();$/;"	p	class:Query	access:public	signature:()
Query::setScheduledDate	src_sr/common/query.cc	/^void Query::setScheduledDate () {$/;"	f	class:Query	signature:()
Query::setStartDate	src_sr/common/packets.hh	/^  void setStartDate ();$/;"	p	class:Query	access:public	signature:()
Query::setStartDate	src_sr/common/query.cc	/^void Query::setStartDate() {$/;"	f	class:Query	signature:()
Query::startDate	src_sr/common/packets.hh	/^  struct timeval startDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
RULER	src_sr/master/scheduler.cc	7;"	d	file:
ReceivedData	src_sr/master/scheduler.cc	/^uint64_t RequestedData = 0, ReceivedData = 0; $/;"	v
ReceivedData	src_sr/slave/node.cc	/^uint64_t ReceivedData = 0;$/;"	v
RequestedData	src_sr/master/scheduler.cc	/^uint64_t RequestedData = 0, ReceivedData = 0; $/;"	v
RequestedData	src_sr/slave/node.cc	/^uint64_t RequestedData = 0;$/;"	v
SCH_PORT	src_sr/slave/node.cc	31;"	d	file:
SETcache	src_sr/common/SETcache.cc	/^SETcache::SETcache (int _size, char* p) {$/;"	f	class:SETcache	signature:(int _size, char* p)
SETcache	src_sr/common/SETcache.hh	/^  SETcache (int, char * p = NULL);$/;"	p	class:SETcache	access:public	signature:(int, char * p = NULL)
SETcache	src_sr/common/SETcache.hh	/^class SETcache {$/;"	c
SETcache::SETcache	src_sr/common/SETcache.cc	/^SETcache::SETcache (int _size, char* p) {$/;"	f	class:SETcache	signature:(int _size, char* p)
SETcache::SETcache	src_sr/common/SETcache.hh	/^  SETcache (int, char * p = NULL);$/;"	p	class:SETcache	access:public	signature:(int, char * p = NULL)
SETcache::_max	src_sr/common/SETcache.hh	/^  int _max, policy;$/;"	m	class:SETcache	access:protected
SETcache::boundary_low	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
SETcache::boundary_upp	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
SETcache::cache	src_sr/common/SETcache.hh	/^  set<diskPage, bool (*) (const diskPage&, const diskPage&)>* cache;$/;"	m	class:SETcache	access:protected
SETcache::cache_time	src_sr/common/SETcache.hh	/^   cache_time;$/;"	m	class:SETcache	access:protected
SETcache::count	src_sr/common/SETcache.hh	/^  uint64_t count;$/;"	m	class:SETcache	access:protected
SETcache::ema	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
SETcache::get_diskPage	src_sr/common/SETcache.cc	/^diskPage SETcache::get_diskPage (uint64_t idx) {$/;"	f	class:SETcache	signature:(uint64_t idx)
SETcache::get_diskPage	src_sr/common/SETcache.hh	/^  diskPage get_diskPage (uint64_t);$/;"	p	class:SETcache	access:public	signature:(uint64_t)
SETcache::get_low	src_sr/common/SETcache.cc	/^diskPage SETcache::get_low () {$/;"	f	class:SETcache	signature:()
SETcache::get_low	src_sr/common/SETcache.hh	/^  diskPage get_low ();$/;"	p	class:SETcache	access:public	signature:()
SETcache::get_upp	src_sr/common/SETcache.cc	/^diskPage SETcache::get_upp () {$/;"	f	class:SETcache	signature:()
SETcache::get_upp	src_sr/common/SETcache.hh	/^  diskPage get_upp ();$/;"	p	class:SETcache	access:public	signature:()
SETcache::is_valid	src_sr/common/SETcache.cc	/^bool SETcache::is_valid (diskPage& dp) {$/;"	f	class:SETcache	signature:(diskPage& dp)
SETcache::is_valid	src_sr/common/SETcache.hh	/^  bool is_valid (diskPage&);$/;"	p	class:SETcache	access:public	signature:(diskPage&)
SETcache::match	src_sr/common/SETcache.cc	/^bool SETcache::match (Query& q) {$/;"	f	class:SETcache	signature:(Query& q)
SETcache::match	src_sr/common/SETcache.hh	/^  bool match (Query&);$/;"	p	class:SETcache	access:public	signature:(Query&)
SETcache::mutex_match	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_match     ;$/;"	m	class:SETcache	access:protected
SETcache::mutex_queue_low	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_queue_low ;$/;"	m	class:SETcache	access:protected
SETcache::mutex_queue_upp	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_queue_upp ;$/;"	m	class:SETcache	access:protected
SETcache::operator <<	src_sr/common/SETcache.hh	/^  friend ostream& operator<< (ostream&, SETcache&);$/;"	p	class:SETcache	access:friend	signature:(ostream&, SETcache&)
SETcache::path	src_sr/common/SETcache.hh	/^  char path [256];$/;"	m	class:SETcache	access:protected
SETcache::policy	src_sr/common/SETcache.hh	/^  int _max, policy;$/;"	m	class:SETcache	access:protected
SETcache::pop_farthest	src_sr/common/SETcache.cc	/^void SETcache::pop_farthest () {$/;"	f	class:SETcache	signature:()
SETcache::pop_farthest	src_sr/common/SETcache.hh	/^  void pop_farthest ();$/;"	p	class:SETcache	access:protected	signature:()
SETcache::queue_lower	src_sr/common/SETcache.hh	/^  queue<diskPage> queue_lower;$/;"	m	class:SETcache	access:public
SETcache::queue_upper	src_sr/common/SETcache.hh	/^  queue<diskPage> queue_upper;$/;"	m	class:SETcache	access:public
SETcache::setDataFile	src_sr/common/SETcache.cc	/^void SETcache::setDataFile (char* p) { $/;"	f	class:SETcache	signature:(char* p)
SETcache::setDataFile	src_sr/common/SETcache.hh	/^  void setDataFile (char*);$/;"	p	class:SETcache	access:public	signature:(char*)
SETcache::set_policy	src_sr/common/SETcache.hh	/^  void set_policy (int);$/;"	p	class:SETcache	access:public	signature:(int)
SETcache::update	src_sr/common/SETcache.cc	/^void SETcache::update (double low, double upp) {$/;"	f	class:SETcache	signature:(double low, double upp)
SETcache::update	src_sr/common/SETcache.hh	/^  void update (double low, double upp);$/;"	p	class:SETcache	access:public	signature:(double low, double upp)
SETcache::~SETcache	src_sr/common/SETcache.hh	/^  ~SETcache () { delete cache; delete cache_time;}$/;"	f	class:SETcache	access:public	signature:()
SentShiftedQuery	src_sr/master/scheduler.cc	/^uint64_t TotalExecTime = 0, TotalWaitTime = 0, shiftedQuery = 0, SentShiftedQuery = 0; $/;"	v
SentShiftedQuery	src_sr/slave/node.cc	/^uint64_t SentShiftedQuery = 0;$/;"	v
TotalCacheHit	src_sr/master/scheduler.cc	/^uint64_t TotalCacheHit = 0, TotalCacheMiss = 0, numQuery = 0;$/;"	v
TotalCacheMiss	src_sr/master/scheduler.cc	/^uint64_t TotalCacheHit = 0, TotalCacheMiss = 0, numQuery = 0;$/;"	v
TotalExecTime	src_sr/master/scheduler.cc	/^uint64_t TotalExecTime = 0, TotalWaitTime = 0, shiftedQuery = 0, SentShiftedQuery = 0; $/;"	v
TotalExecTime	src_sr/slave/node.cc	/^uint64_t TotalExecTime = 0;$/;"	v
TotalExecTime	src_sr/slave/node_sketch.hh	/^  uint64_t TotalExecTime;$/;"	m	class:Node	access:protected
TotalWaitTime	src_sr/master/scheduler.cc	/^uint64_t TotalExecTime = 0, TotalWaitTime = 0, shiftedQuery = 0, SentShiftedQuery = 0; $/;"	v
TotalWaitTime	src_sr/slave/node.cc	/^uint64_t TotalWaitTime = 0;$/;"	v
TotalWaitTime	src_sr/slave/node_sketch.hh	/^  uint64_t TotalWaitTime;$/;"	m	class:Node	access:protected
UPDATE	src_sr/common/SETcache.hh	/^ UPDATE   = 0x1,$/;"	e	enum:policy
WEAK	src_sr/common/macros.h	11;"	d
WEAK	src_sr/common/macros.h	9;"	d
WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_dht       (void*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_forward   (void*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_neighbor  (void*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  static void* thread_func_scheduler (void*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  void close_all              (void) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  void parse_args             (int, const char**, Arguments*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  void setup_client_peer      (const int, const char*, int*, struct sockaddr_in*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  void setup_client_scheduler (int, const char*, int*) WEAK;$/;"	m	class:Node	access:protected
WEAK	src_sr/slave/node_sketch.hh	/^  void setup_server_peer      (int, int*, struct sockaddr_in*) WEAK;$/;"	m	class:Node	access:protected
_DEBUG	src_sr/slave/test/common.cc	1;"	d	file:
_DEBUG	src_sr/slave/test/main.cc	1;"	d	file:
_DEBUG	src_sr/slave/test/random_number.cc	1;"	d	file:
_DEBUG	src_sr/slave/test/same_number.cc	1;"	d	file:
_SIMRING_HH_	src_sr/common/simring.hh	8;"	d
__DHT_HH_	src_sr/common/dht.hh	2;"	d
__MACROS_H__	src_sr/common/macros.h	2;"	d
__NODE_CLIENT_HH_	src_sr/master/node_client.hh	2;"	d
__NODE_HH_	src_sr/slave/node.hh	7;"	d
__NODE_SKETCH_HH_	src_sr/slave/node_sketch.hh	2;"	d
__ORDER_HH	common/order.hh	2;"	d
__PACKETS_HH_	src_sr/common/packets.hh	2;"	d
__SETCACHE_HH_	src_sr/common/SETcache.hh	2;"	d
__SR_MASTER_HH_	src_sr/master/master.hh	2;"	d
__STDC_FORMAT_MACROS	src_sr/common/macros.h	15;"	d
__UTILS_HH_	src_sr/common/utils.hh	2;"	d
_connect	src_sr/slave/node.cc	/^int (*_connect) (int, const struct sockaddr*, socklen_t) = connect;$/;"	v
_max	src_sr/common/SETcache.hh	/^  int _max, policy;$/;"	m	class:SETcache	access:protected
_nservers	src_sr/common/dht.hh	/^  int _nservers;$/;"	m	class:DHT	access:protected
_recv	src_sr/slave/node.cc	/^ssize_t (*_recv) (int, void*, size_t, int) = recv;$/;"	v
_send	src_sr/slave/node.cc	/^ssize_t (*_send) (int, const void*, size_t, int) = send;$/;"	v
_sendto	src_sr/slave/node.cc	/^ssize_t (*_sendto) (int, const void*, size_t, int) = send;$/;"	v
accept	src_sr/master/node_client.hh	/^		Node& accept (int sock) {$/;"	f	class:Node	access:public	signature:(int sock)
addr	src_sr/master/node_client.hh	/^		struct sockaddr_in addr;$/;"	m	class:Node	typeref:struct:Node::sockaddr_in	access:protected
addr_left	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::sockaddr_in	access:protected
addr_right	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::	access:protected
addr_server	src_sr/slave/node_sketch.hh	/^  struct sockaddr_in addr_left, addr_right, addr_server;$/;"	m	class:Node	typeref:struct:Node::	access:protected
alpha	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
backend	src_sr/master/master.hh	/^  Node** backend;$/;"	m	class:Master	access:protected
backend	src_sr/master/scheduler.cc	/^Node** backend;$/;"	v
bandwidth	src_sr/master/em_kde.cc	/^const int bandwidth = 0;$/;"	v
boundary_low	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
boundary_upp	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
c	src_sr/slave/test/common.cc	/^static int c = 0;$/;"	v	file:
c	src_sr/slave/test/random_number.cc	/^int c = 0;$/;"	v
cache	src_sr/common/SETcache.hh	/^  set<diskPage, bool (*) (const diskPage&, const diskPage&)>* cache;$/;"	m	class:SETcache	access:protected
cache	src_sr/slave/node.cc	/^SETcache cache (CACHESIZE); $/;"	p	file:	signature:(CACHESIZE)
cache	src_sr/slave/node_sketch.hh	/^  SETcache cache; $/;"	m	class:Node	access:protected
cache_time	src_sr/common/SETcache.hh	/^   cache_time;$/;"	m	class:SETcache	access:protected
catchSignal	src_sr/master/scheduler.cc	/^void catchSignal (int Signal) {$/;"	f	signature:(int Signal)
catch_signal	src_sr/slave/node.cc	/^void catch_signal (int arg) {$/;"	f	signature:(int arg)
catch_signal	src_sr/slave/node.hh	/^void catch_signal           (int);$/;"	p	signature:(int)
catch_signal	src_sr/slave/node_sketch.cc	/^void Node::catch_signal (int arg) {$/;"	f	class:Node	signature:(int arg)
catch_signal	src_sr/slave/node_sketch.hh	/^  void catch_signal           (int);$/;"	p	class:Node	access:protected	signature:(int)
check	src_sr/common/dht.cc	/^bool DHT::check (Header& h) {$/;"	f	class:DHT	signature:(Header& h)
check	src_sr/common/dht.hh	/^  bool check (Header&);$/;"	p	class:DHT	access:public	signature:(Header&)
chunk	src_sr/common/packets.hh	/^  char chunk [DPSIZE];$/;"	m	class:diskPage	access:public
close	src_sr/master/node_client.hh	/^		Node& close () { ::close (fd); return *this; }$/;"	f	class:Node	access:public	signature:()
close_all	src_sr/slave/node.cc	/^void close_all () {$/;"	f	signature:()
close_all	src_sr/slave/node_sketch.cc	/^void Node::close_all () {$/;"	f	class:Node	signature:()
connect_mock	src_sr/slave/node.hh	/^int connect_mock            (int, const struct sockaddr*, socklen_t);$/;"	p	signature:(int, const struct sockaddr*, socklen_t)
connect_mock	src_sr/slave/test/common.cc	/^int connect_mock (int sock, const struct sockaddr* a, socklen_t l) {$/;"	f	signature:(int sock, const struct sockaddr* a, socklen_t l)
connected	src_sr/master/scheduler.cc	/^int16_t* connected;$/;"	v
count	src_sr/common/SETcache.hh	/^  uint64_t count;$/;"	m	class:SETcache	access:protected
data_file	src_sr/slave/node.hh	/^  char data_file [256];$/;"	m	struct:Arguments	access:public
data_file	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
data_set	src_sr/common/dht.hh	/^const uint64_t data_set = 1000000;$/;"	v
deserialize	common/order.cc	/^void Order::deserialize (char * chunk) {$/;"	f	class:Order	signature:(char * chunk)
deserialize	common/order.hh	/^  void deserialize (char*);$/;"	p	class:Order	access:public	signature:(char*)
dht	src_sr/slave/node.cc	/^DHT dht;$/;"	v
dht	src_sr/slave/node_sketch.hh	/^  DHT dht;$/;"	m	class:Node	access:protected
dht_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
diskPage	src_sr/common/packets.hh	/^  diskPage () : Header () {}$/;"	f	class:diskPage	access:public	signature:()
diskPage	src_sr/common/packets.hh	/^  diskPage (const diskPage& that) : Header (that) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& that)
diskPage	src_sr/common/packets.hh	/^  diskPage (const uint64_t i) : Header () { point = i; }$/;"	f	class:diskPage	access:public	signature:(const uint64_t i)
diskPage	src_sr/common/packets.hh	/^class diskPage : public Header {$/;"	c	inherits:Header
diskPage::chunk	src_sr/common/packets.hh	/^  char chunk [DPSIZE];$/;"	m	class:diskPage	access:public
diskPage::diskPage	src_sr/common/packets.hh	/^  diskPage () : Header () {}$/;"	f	class:diskPage	access:public	signature:()
diskPage::diskPage	src_sr/common/packets.hh	/^  diskPage (const diskPage& that) : Header (that) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& that)
diskPage::diskPage	src_sr/common/packets.hh	/^  diskPage (const uint64_t i) : Header () { point = i; }$/;"	f	class:diskPage	access:public	signature:(const uint64_t i)
diskPage::less_than	src_sr/common/packets.hh	/^  static bool less_than (const diskPage& a, const diskPage& b) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& a, const diskPage& b)
diskPage::less_than_lru	src_sr/common/packets.hh	/^  static bool less_than_lru (const diskPage& a, const diskPage& b) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& a, const diskPage& b)
diskPage::operator =	src_sr/common/packets.hh	/^  diskPage& operator= (const diskPage& that) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& that)
diskPage::time	src_sr/common/packets.hh	/^  uint64_t time;$/;"	m	class:diskPage	access:public
dump_trace	src_sr/common/utils.cc	/^void dump_trace (void) {$/;"	f	signature:(void)
dump_trace	src_sr/common/utils.hh	/^void     dump_trace    (void);$/;"	p	signature:(void)
ema	src_sr/common/SETcache.hh	/^  double boundary_low, boundary_upp, ema;$/;"	m	class:SETcache	access:protected
error_str	src_sr/common/utils.cc	/^const char *error_str [20] = {$/;"	v
error_str_nocolor	src_sr/common/utils.cc	/^const char *error_str_nocolor [20] = {"[ERROR]", "[WARN]", "[DEBUG]", "[INFO]"};$/;"	v
fd	src_sr/master/node_client.hh	/^		int fd;$/;"	m	class:Node	access:protected
fd_is_ready	src_sr/common/utils.cc	/^fd_is_ready (int fd) $/;"	f	signature:(int fd)
fd_is_ready	src_sr/common/utils.hh	/^inline bool fd_is_ready (int);$/;"	p	signature:(int)
file_name	common/order.hh	/^  char file_name [128];$/;"	m	class:Order	access:private
finish	src_sr/master/scheduler.cc	/^static jmp_buf finish;$/;"	v	file:
finishedDate	src_sr/common/packets.hh	/^  struct timeval finishedDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
getExecTime	src_sr/common/packets.hh	/^  uint64_t getExecTime ();$/;"	p	class:Query	access:public	signature:()
getExecTime	src_sr/common/query.cc	/^uint64_t Query::getExecTime() {$/;"	f	class:Query	signature:()
getWaitTime	src_sr/common/packets.hh	/^  uint64_t getWaitTime ();$/;"	p	class:Query	access:public	signature:()
getWaitTime	src_sr/common/query.cc	/^uint64_t Query::getWaitTime() {$/;"	f	class:Query	signature:()
get_EMA	src_sr/common/packets.hh	/^  double   get_EMA   () { return EMA; }$/;"	f	class:Header	access:public	signature:()
get_EMA	src_sr/master/node_client.hh	/^		double get_EMA () const { return EMA; }$/;"	f	class:Node	access:public	signature:() const
get_diskPage	src_sr/common/SETcache.cc	/^diskPage SETcache::get_diskPage (uint64_t idx) {$/;"	f	class:SETcache	signature:(uint64_t idx)
get_diskPage	src_sr/common/SETcache.hh	/^  diskPage get_diskPage (uint64_t);$/;"	p	class:SETcache	access:public	signature:(uint64_t)
get_distance	src_sr/master/node_client.hh	/^		double get_distance (Packet& p) { return fabs (EMA - p.get_point ()); }$/;"	f	class:Node	access:public	signature:(Packet& p)
get_distance	src_sr/master/node_client.hh	/^		double get_distance (uint64_t p) { return fabs (EMA - p); }$/;"	f	class:Node	access:public	signature:(uint64_t p)
get_fd	src_sr/master/node_client.hh	/^		int get_fd () { return fd; }$/;"	f	class:Node	access:public	signature:()
get_ip	src_sr/common/utils.cc	/^char* get_ip (const char* interface) {$/;"	f	signature:(const char* interface)
get_ip	src_sr/common/utils.hh	/^char*    get_ip        (const char*);$/;"	p	signature:(const char*)
get_low	src_sr/common/SETcache.cc	/^diskPage SETcache::get_low () {$/;"	f	class:SETcache	signature:()
get_low	src_sr/common/SETcache.hh	/^  diskPage get_low ();$/;"	p	class:SETcache	access:public	signature:()
get_low	src_sr/common/packets.hh	/^  double   get_low   () { return low_b; }$/;"	f	class:Header	access:public	signature:()
get_low	src_sr/master/node_client.hh	/^		double get_low () { return low_b; }$/;"	f	class:Node	access:public	signature:()
get_point	src_sr/common/packets.hh	/^  uint64_t get_point () { return point; }$/;"	f	class:Header	access:public	signature:()
get_upp	src_sr/common/SETcache.cc	/^diskPage SETcache::get_upp () {$/;"	f	class:SETcache	signature:()
get_upp	src_sr/common/SETcache.hh	/^  diskPage get_upp ();$/;"	p	class:SETcache	access:public	signature:()
get_upp	src_sr/common/packets.hh	/^  double   get_upp   () { return upp_b; }$/;"	f	class:Header	access:public	signature:()
get_upp	src_sr/master/node_client.hh	/^		double get_upp () { return upp_b; } $/;"	f	class:Node	access:public	signature:()
hilbert	src_sr/common/utils.cc	/^hilbert (int64_t n, int64_t x, int64_t y) $/;"	f	signature:(int64_t n, int64_t x, int64_t y)
hilbert	src_sr/common/utils.hh	/^int64_t  hilbert       (int64_t n, int64_t x, int64_t y);$/;"	p	signature:(int64_t n, int64_t x, int64_t y)
hitCount	src_sr/slave/node.cc	/^uint64_t hitCount = 0;$/;"	v
hitCount	src_sr/slave/node_sketch.hh	/^  uint64_t hitCount;$/;"	m	class:Node	access:protected
host_str	src_sr/slave/node.hh	/^  char host_str [32];$/;"	m	struct:Arguments	access:public
host_str	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
instance	src_sr/slave/node_sketch.hh	/^  static Node& instance;$/;"	m	class:Node	access:public
ips	src_sr/common/test/dht_test.cc	/^const char * ips [32] = {$/;"	v
is_valid	src_sr/common/SETcache.cc	/^bool SETcache::is_valid (diskPage& dp) {$/;"	f	class:SETcache	signature:(diskPage& dp)
is_valid	src_sr/common/SETcache.hh	/^  bool is_valid (diskPage&);$/;"	p	class:SETcache	access:public	signature:(diskPage&)
join	src_sr/common/SETcache.cc	/^void join (uint64_t item) {$/;"	f	signature:(uint64_t item)
join	src_sr/slave/node_sketch.cc	/^void Node::join () {$/;"	f	class:Node	signature:()
join	src_sr/slave/node_sketch.hh	/^  bool join ();$/;"	p	class:Node	access:public	signature:()
less_than	src_sr/common/packets.hh	/^  static bool less_than (const diskPage& a, const diskPage& b) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& a, const diskPage& b)
less_than_lru	src_sr/common/packets.hh	/^  static bool less_than_lru (const diskPage& a, const diskPage& b) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& a, const diskPage& b)
list_chunk	common/order.hh	/^  list<uint8_t*> list_chunk; \/\/! Splited in 4KiB chuncks$/;"	m	class:Order	access:private
local_ip	src_sr/common/dht.hh	/^  char local_ip [32];$/;"	m	class:DHT	access:protected
local_ip	src_sr/slave/node.cc	/^char* local_ip;$/;"	v
local_ip	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
local_no	src_sr/common/dht.hh	/^  int local_no;$/;"	m	class:DHT	access:protected
log	src_sr/common/utils.cc	/^log (int type, const char* _ip, const char* in, ...) $/;"	f	signature:(int type, const char* _ip, const char* in, ...)
log	src_sr/common/utils.hh	/^void     log           (int, const char* _ip, const char* in, ...);$/;"	p	signature:(int, const char* _ip, const char* in, ...)
low_b	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
low_b	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
m_error	src_sr/common/utils.hh	/^enum m_error {$/;"	g
main	src_sr/common/test/dht_test.cc	/^int main () {$/;"	f	signature:()
main	src_sr/common/test/ds_test.cc	/^int main () {$/;"	f	signature:()
main	src_sr/master/scheduler.cc	/^int main (int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	src_sr/slave/main.cc	/^int main (int argc, const char** argv) {$/;"	f	signature:(int argc, const char** argv)
main	src_sr/slave/test/main.cc	/^int main (int argc, const char** argv) {$/;"	f	signature:(int argc, const char** argv)
match	src_sr/common/SETcache.cc	/^bool SETcache::match (Query& q) {$/;"	f	class:SETcache	signature:(Query& q)
match	src_sr/common/SETcache.hh	/^  bool match (Query&);$/;"	p	class:SETcache	access:public	signature:(Query&)
missCount	src_sr/slave/node.cc	/^uint64_t missCount = 0;$/;"	v
missCount	src_sr/slave/node_sketch.hh	/^  uint64_t missCount;$/;"	m	class:Node	access:protected
mutex_match	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_match     ;$/;"	m	class:SETcache	access:protected
mutex_queue_low	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_queue_low ;$/;"	m	class:SETcache	access:protected
mutex_queue_upp	src_sr/common/SETcache.hh	/^  pthread_mutex_t mutex_queue_upp ;$/;"	m	class:SETcache	access:protected
my_dht	src_sr/common/test/dht_test.cc	/^DHT my_dht;$/;"	v
nbins	src_sr/master/em_kde.cc	/^const int nbins = 10;$/;"	v
network_addr	src_sr/common/dht.hh	/^  struct sockaddr_in *network_addr;$/;"	m	class:DHT	typeref:struct:DHT::sockaddr_in	access:protected
network_ip	src_sr/common/dht.hh	/^  char ** network_ip;$/;"	m	class:DHT	access:protected
network_ip	src_sr/slave/node.cc	/^const char * network_ip [10] = $/;"	v
network_ip	src_sr/slave/node_sketch.hh	/^  const char * network_ip [10] = $/;"	m	class:Node	access:protected
nservers	src_sr/master/scheduler.cc	/^int sock, port = 0, nservers = 0;$/;"	v
nslaves	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
numQuery	src_sr/master/scheduler.cc	/^uint64_t TotalCacheHit = 0, TotalCacheMiss = 0, numQuery = 0;$/;"	v
objects	src_sr/common/Makefile	/^objects := $(patsubst %.cc, %.o, $(sources))$/;"	m
operator <<	common/order.hh	/^  friend ostream& operator<< (ostream& os, Order o) {$/;"	f	class:Order	access:friend	signature:(ostream& os, Order o)
operator <<	src_sr/common/SETcache.cc	/^ostream& operator<< (ostream& out, SETcache& in) {$/;"	f	signature:(ostream& out, SETcache& in)
operator <<	src_sr/common/SETcache.hh	/^  friend ostream& operator<< (ostream&, SETcache&);$/;"	p	class:SETcache	access:friend	signature:(ostream&, SETcache&)
operator =	src_sr/common/packets.hh	/^  Header& operator= (const Header& that) {$/;"	f	class:Header	access:public	signature:(const Header& that)
operator =	src_sr/common/packets.hh	/^  Packet& operator= (const Packet& that) {$/;"	f	class:Packet	access:public	signature:(const Packet& that)
operator =	src_sr/common/packets.hh	/^  diskPage& operator= (const diskPage& that) {$/;"	f	class:diskPage	access:public	signature:(const diskPage& that)
operator ==	src_sr/common/packets.hh	/^  bool operator== (const Header& that) {$/;"	f	class:Header	access:public	signature:(const Header& that)
packet_vector	src_sr/slave/test/random_number.cc	/^packet packet_vector [] = {packet (1), packet (2), packet (3), packet (4), packet (5)}; $/;"	v
panic	src_sr/slave/node.cc	/^bool panic = false;$/;"	v
panic	src_sr/slave/node_sketch.hh	/^  bool panic;$/;"	m	class:Node	access:protected
parse_args	src_sr/slave/node.cc	/^void parse_args (int argc, const char** argv, Arguments* args) {$/;"	f	signature:(int argc, const char** argv, Arguments* args)
parse_args	src_sr/slave/node.hh	/^void parse_args             (int, const char**);$/;"	p	signature:(int, const char**)
parse_args	src_sr/slave/node_sketch.cc	/^void Node::parse_args (int argc, const char** argv) {$/;"	f	class:Node	signature:(int argc, const char** argv)
parse_args	src_sr/slave/test/common.cc	/^void parse_args (int argc, const char** argv) {$/;"	f	signature:(int argc, const char** argv)
path	src_sr/common/SETcache.hh	/^  char path [256];$/;"	m	class:SETcache	access:protected
peer_left	src_sr/slave/node.hh	/^  char peer_left [32];$/;"	m	struct:Arguments	access:public
peer_left	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
peer_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
peer_right	src_sr/slave/node.hh	/^  char peer_right [32];$/;"	m	struct:Arguments	access:public
peer_right	src_sr/slave/node_sketch.hh	/^  char *local_ip, peer_left [32], peer_right[32], host_str [128], data_file [128];$/;"	m	class:Node	access:protected
point	src_sr/common/packets.hh	/^  uint64_t point;  \/\/! Key\/ index$/;"	m	class:Header	access:public
poisson	src_sr/common/utils.cc	/^poisson (double c)$/;"	f	signature:(double c)
poisson	src_sr/common/utils.hh	/^int      poisson       (double);$/;"	p	signature:(double)
policy	src_sr/common/SETcache.hh	/^  int _max, policy;$/;"	m	class:SETcache	access:protected
policy	src_sr/common/SETcache.hh	/^enum policy {$/;"	g
pop_farthest	src_sr/common/SETcache.cc	/^void SETcache::pop_farthest () {$/;"	f	class:SETcache	signature:()
pop_farthest	src_sr/common/SETcache.hh	/^  void pop_farthest ();$/;"	p	class:SETcache	access:protected	signature:()
port	src_sr/common/dht.hh	/^  int sock, port;$/;"	m	class:DHT	access:protected
port	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
port	src_sr/master/scheduler.cc	/^int sock, port = 0, nservers = 0;$/;"	v
port	src_sr/slave/node.hh	/^  int port;$/;"	m	struct:Arguments	access:public
prepare_input	src_sr/common/utils.cc	/^uint64_t prepare_input (char* in) {$/;"	f	signature:(char* in)
prepare_input	src_sr/common/utils.hh	/^uint64_t prepare_input (char* in);$/;"	p	signature:(char* in)
print_header	src_sr/master/scheduler.cc	/^void print_header (void) {$/;"	f	signature:(void)
print_out	src_sr/master/scheduler.cc	/^void print_out (void) {$/;"	f	signature:(void)
queryProcessed	src_sr/slave/node.cc	/^uint32_t queryProcessed = 0;$/;"	v
queryProcessed	src_sr/slave/node_sketch.hh	/^  uint32_t queryProcessed;$/;"	m	class:Node	access:protected
queryRecieves	src_sr/slave/node_sketch.hh	/^  uint32_t queryRecieves;$/;"	m	class:Node	access:protected
queue_lower	src_sr/common/SETcache.hh	/^  queue<diskPage> queue_lower;$/;"	m	class:SETcache	access:public
queue_upper	src_sr/common/SETcache.hh	/^  queue<diskPage> queue_upper;$/;"	m	class:SETcache	access:public
receive_all	src_sr/master/scheduler.cc	/^void receive_all (void) {$/;"	f	signature:(void)
recv	src_sr/master/master.hh	/^  Order& recv (char* file_name);$/;"	p	class:Master	access:public	signature:(char* file_name)
recv_mock	src_sr/slave/node.hh	/^ssize_t recv_mock           (int, void*, size_t, int);$/;"	p	signature:(int, void*, size_t, int)
recv_mock	src_sr/slave/test/random_number.cc	/^ssize_t recv_mock (int fd, void* buff, size_t s, int flags) {$/;"	f	signature:(int fd, void* buff, size_t s, int flags)
recv_mock	src_sr/slave/test/same_number.cc	/^int recv_mock (int fd, void* buff, size_t s, int flags) {$/;"	f	signature:(int fd, void* buff, size_t s, int flags)
recv_msg	src_sr/common/utils.cc	/^recv_msg (int socket, char* recv_data)$/;"	f	signature:(int socket, char* recv_data)
recv_msg	src_sr/common/utils.hh	/^void     recv_msg      (int, char*) __attribute__((weak));$/;"	p	signature:(int, char*)
recv_msg	src_sr/slave/test/common.cc	/^void recv_msg (int fd, char* in) {$/;"	f	signature:(int fd, char* in)
recv_msg2	src_sr/slave/node.hh	/^void recv_msg2              (int fd, char* in);$/;"	p	signature:(int fd, char* in)
recv_msg2	src_sr/slave/test/common.cc	/^void recv_msg2 (int fd, char* in) {$/;"	f	signature:(int fd, char* in)
recvfrom_mock	src_sr/slave/node.hh	/^ssize_t recvfrom_mock       (int, const void*, size_t, int);$/;"	p	signature:(int, const void*, size_t, int)
request	src_sr/common/dht.cc	/^bool DHT::request (Header& h) {$/;"	f	class:DHT	signature:(Header& h)
request	src_sr/common/dht.hh	/^  bool request (Header&);$/;"	p	class:DHT	access:public	signature:(Header&)
rot	src_sr/common/utils.cc	/^rot (int64_t n, int64_t  *x, int64_t *y, int64_t  rx, int64_t ry) $/;"	f	signature:(int64_t n, int64_t *x, int64_t *y, int64_t rx, int64_t ry)
run	src_sr/slave/node_sketch.cc	/^void Node::run () {$/;"	f	class:Node	signature:()
run	src_sr/slave/node_sketch.hh	/^  bool run ();$/;"	p	class:Node	access:public	signature:()
sch_port	src_sr/slave/node_sketch.hh	/^  int sch_port, peer_port, dht_port;$/;"	m	class:Node	access:protected
schedule	src_sr/master/em_kde.cc	/^void schedule (Query& q, int boundary [], int nservers) {$/;"	f	signature:(Query& q, int boundary [], int nservers)
scheduledDate	src_sr/common/packets.hh	/^  struct timeval scheduledDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
select_slave	src_sr/master/master.cc	/^int Master::select_slave (uint64_t key) {$/;"	f	class:Master	signature:(uint64_t key)
select_slave	src_sr/master/master.hh	/^  virtual select_slave (uint64_t key); $/;"	p	class:Master	access:protected	signature:(uint64_t key)
send	src_sr/master/node_client.hh	/^		Node& send (uint64_t point, bool trace = false) {$/;"	f	class:Node	access:public	signature:(uint64_t point, bool trace = false)
send_mock	src_sr/slave/node.hh	/^ssize_t send_mock           (int, const void*, size_t, int);$/;"	p	signature:(int, const void*, size_t, int)
send_mock	src_sr/slave/test/random_number.cc	/^ssize_t send_mock (int fd, const void* buff, size_t s, int flags) {$/;"	f	signature:(int fd, const void* buff, size_t s, int flags)
send_mock	src_sr/slave/test/same_number.cc	/^int send_mock (int fd, void* buff, size_t s, int flags) {$/;"	f	signature:(int fd, void* buff, size_t s, int flags)
send_msg	src_sr/common/utils.cc	/^send_msg (int socket, const char* send_data)$/;"	f	signature:(int socket, const char* send_data)
send_msg	src_sr/common/utils.hh	/^void     send_msg      (int, const char*);$/;"	p	signature:(int, const char*)
send_msg	src_sr/master/node_client.hh	/^		Node& send_msg (const char * in) { ::send_msg (fd, in); return *this; }$/;"	f	class:Node	access:public	signature:(const char * in)
sendto_mock	src_sr/slave/node.hh	/^ssize_t sendto_mock         (int, const void*, size_t, int);$/;"	p	signature:(int, const void*, size_t, int)
serialize	common/order.cc	/^uint8_t* Order::serialize (size_t* size = NULL) {$/;"	f	class:Order	signature:(size_t* size = NULL)
serialize	common/order.hh	/^  uint8_t* serialize (size_t*);$/;"	p	class:Order	access:public	signature:(size_t*)
setDataFile	src_sr/common/SETcache.cc	/^void SETcache::setDataFile (char* p) { $/;"	f	class:SETcache	signature:(char* p)
setDataFile	src_sr/common/SETcache.hh	/^  void setDataFile (char*);$/;"	p	class:SETcache	access:public	signature:(char*)
setFinishedDate	src_sr/common/packets.hh	/^  void setFinishedDate ();$/;"	p	class:Query	access:public	signature:()
setFinishedDate	src_sr/common/query.cc	/^void Query::setFinishedDate() {$/;"	f	class:Query	signature:()
setScheduledDate	src_sr/common/packets.hh	/^  void setScheduledDate ();$/;"	p	class:Query	access:public	signature:()
setScheduledDate	src_sr/common/query.cc	/^void Query::setScheduledDate () {$/;"	f	class:Query	signature:()
setStartDate	src_sr/common/packets.hh	/^  void setStartDate ();$/;"	p	class:Query	access:public	signature:()
setStartDate	src_sr/common/query.cc	/^void Query::setStartDate() {$/;"	f	class:Query	signature:()
set_EMA	src_sr/common/packets.hh	/^  Header& set_EMA (double e)     { EMA = e;      return *this; }$/;"	f	class:Header	access:public	signature:(double e)
set_EMA	src_sr/master/node_client.hh	/^		Node& set_EMA (double a)    { EMA= a;    return *this;}$/;"	f	class:Node	access:public	signature:(double a)
set_alpha	src_sr/master/node_client.hh	/^		Node& set_alpha (double a)  { alpha = a; return *this;}$/;"	f	class:Node	access:public	signature:(double a)
set_fd	src_sr/master/node_client.hh	/^		Node& set_fd (int f)        { fd = f;    return *this;}$/;"	f	class:Node	access:public	signature:(int f)
set_low	src_sr/common/packets.hh	/^  Header& set_low (double l)     { low_b = l;    return *this; }$/;"	f	class:Header	access:public	signature:(double l)
set_low	src_sr/master/node_client.hh	/^		Node& set_low (double l)    { low_b = l; return *this;}$/;"	f	class:Node	access:public	signature:(double l)
set_network	src_sr/common/dht.cc	/^void DHT::set_network (int port, int n, const char* ifa, const char ** in) {$/;"	f	class:DHT	signature:(int port, int n, const char* ifa, const char ** in)
set_network	src_sr/common/dht.hh	/^  void set_network (int, int, const char*, const char**);$/;"	p	class:DHT	access:public	signature:(int, int, const char*, const char**)
set_nslaves	src_sr/master/master.hh	/^  Master& set_nslaves (int);$/;"	p	class:Master	access:public	signature:(int)
set_point	src_sr/common/packets.hh	/^  Header& set_point (uint64_t p) { point = p;    return *this; }$/;"	f	class:Header	access:public	signature:(uint64_t p)
set_policy	src_sr/common/SETcache.hh	/^  void set_policy (int);$/;"	p	class:SETcache	access:public	signature:(int)
set_port	src_sr/master/master.hh	/^  Master& set_port (int);$/;"	p	class:Master	access:public	signature:(int)
set_signals	src_sr/master/master.hh	/^  Master& set_signals ();$/;"	p	class:Master	access:public	signature:()
set_time	src_sr/common/packets.hh	/^  Packet& set_time (uint64_t t) { time = t; return *this; }$/;"	f	class:Packet	access:public	signature:(uint64_t t)
set_time	src_sr/master/node_client.hh	/^		Node& set_time (uint64_t u) { time = u;  return *this;} $/;"	f	class:Node	access:public	signature:(uint64_t u)
set_trazable	src_sr/common/packets.hh	/^  Header& set_trazable ()        { trace = true; return *this; }$/;"	f	class:Header	access:public	signature:()
set_upp	src_sr/common/packets.hh	/^  Header& set_upp (double u)     { upp_b = u;    return *this; }$/;"	f	class:Header	access:public	signature:(double u)
set_upp	src_sr/master/node_client.hh	/^		Node& set_upp (double u)    { upp_b = u; return *this;} $/;"	f	class:Node	access:public	signature:(double u)
setup_client_peer	src_sr/slave/node.cc	/^void setup_client_peer (const int port, const char* host, int* sock, sockaddr_in* addr) {$/;"	f	signature:(const int port, const char* host, int* sock, sockaddr_in* addr)
setup_client_peer	src_sr/slave/node_sketch.cc	/^Node::setup_client_peer (const int port, const char* host, int* sock, sockaddr_in* addr)$/;"	f	class:Node	signature:(const int port, const char* host, int* sock, sockaddr_in* addr)
setup_client_scheduler	src_sr/slave/node.cc	/^void setup_client_scheduler (int port, const char* host, int* sock) {$/;"	f	signature:(int port, const char* host, int* sock)
setup_client_scheduler	src_sr/slave/node_sketch.cc	/^void Node::setup_client_scheduler (int port, const char* host, int* sock) {$/;"	f	class:Node	signature:(int port, const char* host, int* sock)
setup_network	src_sr/master/master.cc	/^bool Master::setup_network () {$/;"	f	class:Master	signature:()
setup_network	src_sr/master/master.hh	/^  bool setup_network ();$/;"	p	class:Master	access:protected	signature:()
setup_server_peer	src_sr/slave/node.cc	/^void setup_server_peer (int port, int* sock, sockaddr_in* addr) {$/;"	f	signature:(int port, int* sock, sockaddr_in* addr)
setup_server_peer	src_sr/slave/node_sketch.cc	/^void Node::setup_server_peer (int port, int* sock, sockaddr_in* addr) {$/;"	f	class:Node	signature:(int port, int* sock, sockaddr_in* addr)
shiftedQuery	src_sr/master/scheduler.cc	/^uint64_t TotalExecTime = 0, TotalWaitTime = 0, shiftedQuery = 0, SentShiftedQuery = 0; $/;"	v
shiftedQuery	src_sr/slave/node.cc	/^uint64_t shiftedQuery = 0;$/;"	v
signal_handler	src_sr/slave/node_sketch.cc	/^void Node::signal_handler () { Node.catch_signal(); }$/;"	f	class:Node	signature:()
signal_handler	src_sr/slave/node_sketch.hh	/^  static void signal_handler ();$/;"	p	class:Node	access:public	signature:()
sock	src_sr/common/dht.hh	/^  int sock, port;$/;"	m	class:DHT	access:protected
sock	src_sr/master/master.hh	/^  int port, nslaves, sock;$/;"	m	class:Master	access:protected
sock	src_sr/master/scheduler.cc	/^int sock, port = 0, nservers = 0;$/;"	v
sock_left	src_sr/slave/node.cc	/^int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	v
sock_left	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
sock_right	src_sr/slave/node.cc	/^int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	v
sock_right	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
sock_scheduler	src_sr/slave/node.cc	/^int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	v
sock_scheduler	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
sock_server	src_sr/slave/node.cc	/^int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	v
sock_server	src_sr/slave/node_sketch.hh	/^  int sock_scheduler, sock_left, sock_right, sock_server;  $/;"	m	class:Node	access:protected
sources	src_sr/common/Makefile	/^sources := $(wildcard *.cc) $/;"	m
startDate	src_sr/common/packets.hh	/^  struct timeval startDate;$/;"	m	class:Query	typeref:struct:Query::timeval	access:protected
thread_dht	src_sr/slave/node_sketch.hh	/^  pthread_t thread_dht;$/;"	m	class:Node	access:protected
thread_forward	src_sr/slave/node_sketch.hh	/^  pthread_t thread_forward;$/;"	m	class:Node	access:protected
thread_func_dht	src_sr/slave/node.cc	/^void* thread_func_dht (void* arg) {$/;"	f	signature:(void* arg)
thread_func_dht	src_sr/slave/node_sketch.cc	/^void* Node::thread_func_dht (void* arg) {$/;"	f	class:Node	signature:(void* arg)
thread_func_forward	src_sr/slave/node.cc	/^void * thread_func_forward (void * argv) {$/;"	f	signature:(void * argv)
thread_func_forward	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_forward (void * argv) {$/;"	f	class:Node	signature:(void * argv)
thread_func_neighbor	src_sr/slave/node.cc	/^void * thread_func_neighbor (void* argv) {$/;"	f	signature:(void* argv)
thread_func_neighbor	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_neighbor (void* argv) {$/;"	f	class:Node	signature:(void* argv)
thread_func_scheduler	src_sr/slave/node.cc	/^void * thread_func_scheduler (void * argv) {$/;"	f	signature:(void * argv)
thread_func_scheduler	src_sr/slave/node_sketch.cc	/^void * Node::thread_func_scheduler (void * argv) {$/;"	f	class:Node	signature:(void * argv)
thread_neighbor	src_sr/slave/node_sketch.hh	/^  pthread_t thread_neighbor;$/;"	m	class:Node	access:protected
thread_scheduler	src_sr/slave/node_sketch.hh	/^  pthread_t thread_scheduler;$/;"	m	class:Node	access:protected
time	src_sr/common/packets.hh	/^  uint64_t time; $/;"	m	class:Packet	access:public
time	src_sr/common/packets.hh	/^  uint64_t time;$/;"	m	class:diskPage	access:public
time	src_sr/master/node_client.hh	/^		uint64_t time;$/;"	m	class:Node	access:protected
timediff	src_sr/common/utils.cc	/^timediff (struct timeval *end_time, struct timeval *start_time)$/;"	f	signature:(struct timeval *end_time, struct timeval *start_time)
timediff	src_sr/common/utils.hh	/^uint64_t timediff      (struct timeval*, struct timeval*);$/;"	p	signature:(struct timeval*, struct timeval*)
trace	src_sr/common/packets.hh	/^  bool trace;$/;"	m	class:Header	access:public
update	src_sr/common/SETcache.cc	/^void SETcache::update (double low, double upp) {$/;"	f	class:SETcache	signature:(double low, double upp)
update	src_sr/common/SETcache.hh	/^  void update (double low, double upp);$/;"	p	class:SETcache	access:public	signature:(double low, double upp)
update_EMA	src_sr/master/node_client.hh	/^		Node& update_EMA (double point)  { EMA += alpha * (point - EMA); return *this; } $/;"	f	class:Node	access:public	signature:(double point)
upload	src_sr/master/master.cc	/^int upload (Order& o) {$/;"	f	signature:(Order& o)
upload	src_sr/master/master.hh	/^  int upload (Order&);$/;"	p	class:Master	access:public	signature:(Order&)
upp_b	src_sr/common/packets.hh	/^  double EMA, low_b, upp_b;$/;"	m	class:Header	access:public
upp_b	src_sr/master/node_client.hh	/^		double EMA, low_b, upp_b, alpha;$/;"	m	class:Node	access:protected
wakeUpServer	src_sr/master/scheduler.cc	/^void wakeUpServer (void) {$/;"	f	signature:(void)
~DHT	src_sr/common/dht.cc	/^DHT::~DHT () {$/;"	f	class:DHT	signature:()
~DHT	src_sr/common/dht.hh	/^  ~DHT ();$/;"	p	class:DHT	access:public	signature:()
~Node	src_sr/slave/node_sketch.cc	/^Node::~Node () { close_all (); }$/;"	f	class:Node	signature:()
~Node	src_sr/slave/node_sketch.hh	/^  ~Node ();$/;"	p	class:Node	access:public	signature:()
~Order	common/order.cc	/^Order::~Order () { } $/;"	f	class:Order	signature:()
~SETcache	src_sr/common/SETcache.hh	/^  ~SETcache () { delete cache; delete cache_time;}$/;"	f	class:SETcache	access:public	signature:()
